// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-dockerfile
{
	"name": "Existing Dockerfile",
	"build": {
		"context": "..",
		"dockerfile": "Dockerfile.dev",
		"target": "development",
		"args": {
			"PROJECT_NAME": "${localWorkspaceFolderBasename}",
			"USERNAME": "vscode",
			"INSTALL_TERRAFORM": "false",
			"INSTALL_GCLOUD": "true",
			"INSTALL_HADOLINT": "true",
			"INSTALL_DOCKER": "true"
		}
	},
	"customizations": {
		"vscode": {
			"settings": {
				"terminal.integrated.defaultProfile.linux": "bash"
			},
			"extensions": [
				"ms-azuretools.vscode-docker",
				"tamasfe.even-better-toml",
				"GitHub.copilot",
				"exiasr.hadolint",
				"ms-python.vscode-pylance",
				"ms-toolsai.jupyter",
				"ms-python.python",
				"charliermarsh.ruff",
				"VisualStudioExptTeam.vscodeintellicode",
				"ms-vscode-remote.vscode-remote-extensionpack",
				"Gruntfuggly.todo-tree"
			]
		}
	},
	"mounts": [
		"source=${localEnv:HOME}/.config/gcloud,target=/home/vscode/.config/gcloud,type=bind",
		"source=${localEnv:HOME}/.gitconfig,target=/home/vscode/.gitconfig,type=bind",
		"source=${localEnv:HOME}/.ssh,target=/home/vscode/.ssh,type=bind",
		"source=${localWorkspaceFolderBasename}-bashhistory,target=/commandhistory,type=volume",
		"source=${localEnv:HOME}/.1password/agent.sock,target=/var/run/.1password/agent.sock,type=bind",
		"source=${localEnv:HOME}/.config/1Password/settings,target=/root/.config/1Password/settings,type=bind",
		"source=/run/user/1000/docker.sock,target=/var/run/docker.sock,type=bind"
	],
	"containerEnv": {
		// "SSH_AUTH_SOCK": "/home/vscode/.1password/agent.sock",
		"PROJECT_NAME": "${localWorkspaceFolderBasename}"
	},
	"remoteUser": "root",
	// Features to add to the dev container. More info: https://containers.dev/features.
	"features": {},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line to run commands after the container is created.
	//"postCreateCommand": "${containerEnv:HOME}/entrypoint.sh"
	"postStartCommand": "/entrypoint.sh"
	// Configure tool-specific properties.
	// "customizations": {},
}